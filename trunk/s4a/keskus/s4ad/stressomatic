#!/usr/bin/perl -w

# /* Copyright (C) 2010, Cybernetica AS, http://www.cybernetica.eu/ */


use strict;
use utf8;
use Time::ParseDate;
use RPC::XML;
use RPC::XML::Parser;
use WWW::Curl::Easy;
use FileHandle;


my $mind = $ARGV[0];
my $maxd = $ARGV[1];

my $maxdetectors = 1;
my $ccname = "s4akeskus3.cyber.ee";

my %rrdstats = ();
my %globalstats = ();

my %sigs = ();

my $fh0 = FileHandle->new;
if ($fh0->open("< sid-msg.map")) {
	while (<$fh0>) {
		chomp;
		my @kala = split(/ \|\|/, $_);
		my $muna = $kala[0];
		$sigs{$muna} = 0;
	}
	$fh0->close;
}

foreach my $detector ($mind..$maxd) {

	$globalstats{'alerts'} = 0; 	
	$globalstats{'sigs'} = rand(50) + 3;	
	$globalstats{'badratio'} = 0;	
	$globalstats{'extip'} = 0;
	$globalstats{'activeip'} = 0;

	foreach my $sid (keys %sigs) {

		my $alerts = int(time() - 1266100000);
#		my $alerts = rand(100);
		my $intip = rand(10) + 1;
		my $extip = rand(20);
		my $srcdst = rand(40) + 10;

		$rrdstats{"1:$sid"} = { 'alerts' => $alerts, 'intip' => $intip, 'extip' => $extip, 'srcdst' => $srcdst};

		$globalstats{'alerts'} += $alerts; 	
		$globalstats{'activeip'} = 2*$intip;
		$globalstats{'badratio'} = 0.5;	
		$globalstats{'extip'} += $extip;
	}


	my $tmpreq = prepare_rrd_request("tuvastaja$detector");
	my $reqstr = $tmpreq->as_string();
	my $respo = sendrequest("https://$ccname/xmlrpc.php", $reqstr);
}

### sub's ###

sub prepare_rrd_request {

	my $sn = $_[0];

	my @perrule_metrics;

	foreach my $k (keys %rrdstats) {
	
		my $ratio = 0;
		if ($globalstats{'activeip'} > 0) {
			$ratio = ($rrdstats{$k}{'intip'}/$globalstats{'activeip'}) * 100;
		}

		my $metricselem = RPC::XML::struct->new({
			'sid' => RPC::XML::string->new($k),
			'alerts' => RPC::XML::int->new($rrdstats{$k}{'alerts'}),
			'intip' => RPC::XML::double->new($ratio),
			'extip' => RPC::XML::int->new($rrdstats{$k}{'extip'}),
			'srcdst' => RPC::XML::int->new($rrdstats{$k}{'srcdst'})
		});

		push @perrule_metrics, $metricselem;
	}

	my $global_metrics = RPC::XML::struct->new({
			'alerts' => RPC::XML::int->new($globalstats{'alerts'}),
			'sigs' => RPC::XML::int->new($globalstats{'sigs'}),
			'badratio' => RPC::XML::double->new($globalstats{'badratio'}),
			'extip' => RPC::XML::int->new($globalstats{'extip'})
	});;

	return RPC::XML::request->new( 
		'detector.rrdupdate', 
		RPC::XML::struct->new({
			'shortname' => RPC::XML::string->new($sn), 
			'perruledata' => RPC::XML::array->new(@perrule_metrics),
			'globaldata' => $global_metrics
		})); 
}

sub sendrequest {
	my ($theurl, $reqstr) = @_;
	my $CURL = new WWW::Curl::Easy;

#	print $reqstr;

	my @HEADER = ("Content-Type: application/xml");
	my @BODY;

	$CURL->setopt(CURLOPT_SSL_VERIFYPEER, 0); 
	$CURL->setopt(CURLOPT_HEADER, 0);
	$CURL->setopt(CURLOPT_HTTPHEADER, \@HEADER );
	$CURL->setopt(CURLOPT_POST, 1);
	$CURL->setopt(CURLOPT_POSTFIELDS, $reqstr); 
	$CURL->setopt(CURLOPT_URL, $theurl); 

	$CURL->setopt(CURLOPT_WRITEFUNCTION, \&writeCallback );
	$CURL->setopt(CURLOPT_HEADERFUNCTION, \&headerCallback );
	$CURL->setopt(CURLOPT_FILE, \@BODY);

	$CURL->setopt(CURLOPT_CONNECTTIMEOUT,8); 
	$CURL->setopt(CURLOPT_FOLLOWLOCATION, 1); 

	# Starts the actual request
	my $retcode = $CURL->perform;

	# Looking at the results...
	my %result;
	$result{'curlresp'} = $retcode;

	if ($retcode == 0) {
		my $response_code = $CURL->getinfo(CURLINFO_HTTP_CODE);
		my $xmlansstr= join("", @BODY);

		$result{'httpresp'} = $response_code;

		if ($response_code != 200) {
			print "HTTP POST failed with response: $response_code";
			print "$xmlansstr";
			
		} else {
			$result{'httpdata'} = $xmlansstr;
		}
	   
	} else {
		# 53 SSL probleem
		print "HTTPS connection failed: ".$CURL->errbuf;
	}
	return(\%result);
}

sub writeCallback {
    my ($data, $pointer) = @_;

    push @{$pointer}, $data;
    return length($data);
}

sub headerCallback {
  my($data, $pointer) = @_;

  return length($data);
}

