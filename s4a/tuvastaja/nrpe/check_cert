#! /usr/bin/perl -w
###########################################################################
#####                                                                     #
#####     check_cert.pl -- check  HTTPS,  IMAPS,  LDAPS or SMTP (with     #
#####     STARTTLS) certificate expiration and, optionally, naming.       #
#####                                                                     #
############| mike ryan                       -- 02/03/06, 14:15 |#########

use strict;
use warnings;
no warnings qw(redefine);

use Time::ParseDate;
# use Date::Parse qw(str2time);
use English;
use Getopt::Long;
use URI;

use lib "/usr/local/libexec/nagios";
use utils qw (%ERRORS &print_revision &support);

sub usage {
    my %params = @_;

    if (defined($params{'message'})) {
        my $message = $params{'message'};
        $message =~ s/\n*$/\n/s;
        print STDERR $message;
    }

    print STDERR <<EOF;
Usage: $PROGRAM_NAME --warn=<days> --critical=<days> --file=<name> --protocol=<protocol> [<options>]
    --critical=<days>       number of days before certificate expiration
                            to return a critical status

    --help                  display this message

    --file=<name>             Cert file

    --warning=<days>        number of days before certificate expiration
                            to return a warning status
EOF

    if (!defined($params{'error'}) || $params{'error'}) {
        print "CERTIFICATE UNKNOWN: bad usage\n";
        exit($ERRORS{'UNKNOWN'});
    }
}

###########################################################################
#####                                                                     #
#####     init.                                                           #
#####                                                                     #
###########################################################################

my %opt;
GetOptions(\%opt,
    'critical=i',
    'file=s',
    'help',
    'warning=i',
) || usage();

if (defined($opt{'help'})) {
    usage();
}



###########################################################################
#####                                                                     #
#####     retrieve certificate                                            #
#####                                                                     #
###########################################################################

my $certdata;

if (defined($opt{'file'})) {
	$certdata = read_file($opt{'file'});
} else {
	usage();
}


if (!defined($certdata)) {
    print "CERTIFICATE UNKNOWN: failed to retrieve certificate data\n";
    exit($ERRORS{'UNKNOWN'});
}

# make sure certificate validity isn't in the future.
my $check_start_time = time;
if (!defined($certdata->{'not_before'})) {
    print "CERTIFICATE UNKNOWN: failed to parse Not Before validity\n";
    exit($ERRORS{'UNKNOWN'});
}
if ($check_start_time < $certdata->{'not_before'}) {
    printf("CERTIFICATE CRITICAL: certificate not valid until %s\n", scalar(localtime($certdata->{'not_before'})));
    exit($ERRORS{'CRITICAL'});
}

# make sure certificate validity isn't in the past.
if (!defined($certdata->{'not_after'})) {
    print "CERTIFICATE UNKNOWN: failed to parse Not After validitiy\n";
    exit($ERRORS{'UNKNOWN'});
}
if ($check_start_time > $certdata->{'not_after'}) {
    printf("CERTIFICATE CRITICAL: certificate expired %s\n", scalar(localtime($certdata->{'not_after'})));
    exit($ERRORS{'CRITICAL'});
}

# check for impending expiration.
my $expires_in = int(($certdata->{'not_after'} - $check_start_time) / (24*60*60));
if ($expires_in <= $opt{'critical'}) {
    printf("CERTIFICATE CRITICAL: certificate expires in $expires_in days (%s)\n", scalar(localtime($certdata->{'not_after'})));
    exit($ERRORS{'CRITICAL'});
}
if ($expires_in <= $opt{'warning'}) {
    printf("CERTIFICATE WARNING: certificate expires in $expires_in days (%s)\n", scalar(localtime($certdata->{'not_after'})));
    exit($ERRORS{'WARNING'});
}


# note good certificate.
printf("CERTIFICATE OK: certificate expires in %d days (%s)\n", $expires_in, scalar(localtime($certdata->{'not_after'})));
exit($ERRORS{'OK'});

###########################################################################
#####                                                                     #
#####     certificate retrieval functions.                                #
#####                                                                     #
###########################################################################


sub read_file {
    my ($filename) = @_;

    return(parse_certificate(scalar(`/usr/sbin/openssl x509 -in $filename -text 2>/dev/null`)));
}

sub parse_certificate {
    my ($text) = @_;

    my %result;

    foreach my $line (split(/[\r\n]+/, $text)) {
        if ($line =~ /^\s+Not Before: (.*)$/ ){
            $result{'not_before'} = Time::ParseDate::parsedate($1);
        } elsif ($line =~ /^\s+Not After : (.*)$/ ){
            $result{'not_after'} = Time::ParseDate::parsedate($1);
        } elsif ($line =~ /^\s+Subject:.*, CN=(.*)$/ ){
            $result{'cn'} = $1;
        }
    }

    if (scalar(keys(%result)) == 0) {
        print("CRITICAL: failed to retrieve certificate\n");
        exit($ERRORS{'CRITICAL'});
    }

    return(\%result);
}
